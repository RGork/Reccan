version: '3.8'
services:
    db:
        image: ${DOCKER_REGISTRY_PREFIX:-}postgres:12-alpine
        restart: on-failure
        environment:
            POSTGRES_USER: posthog
            POSTGRES_DB: posthog
            POSTGRES_PASSWORD: posthog
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready -U posthog']
            interval: 5s
            timeout: 5s
        volumes:
            - postgres-data:/var/lib/postgresql/data
            - ./docker/postgres-init-scripts:/docker-entrypoint-initdb.d

    redis:
        image: redis:6.2.7-alpine
        restart: on-failure
        command: redis-server --maxmemory-policy allkeys-lru --maxmemory 200mb
        healthcheck:
            test: ['CMD', 'redis-cli', 'ping']
            interval: 3s
            timeout: 10s
            retries: 10
        volumes:
            - redis-data:/data

    redis7:
        image: redis:7.2-alpine
        restart: on-failure
        command: redis-server --maxmemory-policy allkeys-lru --maxmemory 200mb
        healthcheck:
            test: ['CMD', 'redis-cli', 'ping']
            interval: 3s
            timeout: 10s
            retries: 10
        volumes:
            - redis7-data:/data

    clickhouse:
        image: ${CLICKHOUSE_SERVER_IMAGE:-clickhouse/clickhouse-server:25.3.6.56}
        restart: on-failure
        depends_on:
            - kafka
            - zookeeper
        environment:
            CLICKHOUSE_SKIP_USER_SETUP: 1
        volumes:
            - ./posthog/idl:/idl
            - ./docker/clickhouse/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
            - ./docker/clickhouse/config.xml:/etc/clickhouse-server/config.xml
            - ./docker/clickhouse/config.d/default.xml:/etc/clickhouse-server/config.d/default.xml
            - ./docker/clickhouse/users.xml:/etc/clickhouse-server/users.d/users.xml
            - ./docker/clickhouse/user_defined_function.xml:/etc/clickhouse-server/user_defined_function.xml
            - ./posthog/user_scripts:/var/lib/clickhouse/user_scripts
            - clickhouse-data:/var/lib/clickhouse

    zookeeper:
        image: zookeeper:3.7.0
        restart: on-failure
        volumes:
            - zookeeper-datalog:/datalog
            - zookeeper-data:/data
            - zookeeper-logs:/logs

    kafka:
        image: docker.redpanda.com/redpandadata/redpanda:v25.1.9
        restart: on-failure
        depends_on:
            - zookeeper
        command:
            - redpanda
            - start
            - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
            - --advertise-kafka-addr internal://kafka:9092,external://localhost:19092
            - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
            - --advertise-pandaproxy-addr internal://kafka:8082,external://localhost:18082
            - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
            - --rpc-addr kafka:33145
            - --advertise-rpc-addr kafka:33145
            - --mode dev-container
            - --smp 1
            - --memory 1G
            - --reserve-memory 200M
            - --overprovisioned
            - --set redpanda.empty_seed_starts_cluster=false
            - --seeds kafka:33145
            - --set redpanda.auto_create_topics_enabled=true
        environment:
            ALLOW_PLAINTEXT_LISTENER: 'true'
            KAFKA_LOG_RETENTION_MS: 3600000
            KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
            KAFKA_LOG_RETENTION_HOURS: 1
        healthcheck:
            test: curl -f http://localhost:9644/v1/status/ready || exit 1
            interval: 3s
            timeout: 10s
            retries: 10
        volumes:
            - kafka-data:/bitnami/kafka

    worker:
        image: $REGISTRY_URL:$POSTHOG_APP_TAG
        command: ./bin/docker-worker-celery --with-scheduler
        restart: on-failure
        environment:
            SITE_URL: https://$DOMAIN
            SECRET_KEY: $POSTHOG_SECRET
            OBJECT_STORAGE_ACCESS_KEY_ID: 'object_storage_root_user'
            OBJECT_STORAGE_SECRET_ACCESS_KEY: 'object_storage_root_password'
            OBJECT_STORAGE_ENDPOINT: http://objectstorage:19000
            SESSION_RECORDING_V2_S3_ENDPOINT: http://objectstorage:19000
            OBJECT_STORAGE_ENABLED: true
            ENCRYPTION_SALT_KEYS: $ENCRYPTION_SALT_KEYS
            OTEL_SDK_DISABLED: 'true'
            DISABLE_SECURE_SSL_REDIRECT: 'true'
            IS_BEHIND_PROXY: 'true'
            DATABASE_URL: 'postgres://posthog:posthog@db:5432/posthog'
            CLICKHOUSE_HOST: 'clickhouse'
            CLICKHOUSE_DATABASE: 'posthog'
            CLICKHOUSE_SECURE: 'false'
            CLICKHOUSE_VERIFY: 'false'
            CLICKHOUSE_API_USER: 'api'
            CLICKHOUSE_API_PASSWORD: 'apipass'
            CLICKHOUSE_APP_USER: 'app'
            CLICKHOUSE_APP_PASSWORD: 'apppass'
            API_QUERIES_PER_TEAM: '{"1": 100}'
            KAFKA_HOSTS: 'kafka'
            REDIS_URL: 'redis://redis:6379/'
            PGHOST: db
            PGUSER: posthog
            PGPASSWORD: posthog
            DEPLOYMENT: hobby
            CDP_API_URL: 'http://plugins:6738'

    web:
        image: $REGISTRY_URL:$POSTHOG_APP_TAG
        command: /compose/start
        restart: on-failure
        volumes:
            - ./compose:/compose
        environment:
            SITE_URL: https://$DOMAIN
            LIVESTREAM_HOST: 'https://${DOMAIN}:8666'
            SECRET_KEY: $POSTHOG_SECRET
            OBJECT_STORAGE_ACCESS_KEY_ID: 'object_storage_root_user'
            OBJECT_STORAGE_SECRET_ACCESS_KEY: 'object_storage_root_password'
            OBJECT_STORAGE_ENDPOINT: http://objectstorage:19000
            SESSION_RECORDING_V2_S3_ENDPOINT: http://objectstorage:19000
            OBJECT_STORAGE_ENABLED: true
            ENCRYPTION_SALT_KEYS: $ENCRYPTION_SALT_KEYS
            OTEL_SERVICE_NAME: 'posthog'
            OTEL_EXPORTER_OTLP_ENDPOINT: ''
            OTEL_SDK_DISABLED: true
            IS_BEHIND_PROXY: true
            TRUST_ALL_PROXIES: true
            ALLOWED_HOSTS: "*"
            DISABLE_SECURE_SSL_REDIRECT: true
            SECURE_PROXY_SSL_HEADER: 'HTTP_X_FORWARDED_PROTO,https'
            DATABASE_URL: 'postgres://posthog:posthog@db:5432/posthog'
            CLICKHOUSE_HOST: 'clickhouse'
            CLICKHOUSE_DATABASE: 'posthog'
            CLICKHOUSE_SECURE: 'false'
            CLICKHOUSE_VERIFY: 'false'
            CLICKHOUSE_API_USER: 'api'
            CLICKHOUSE_API_PASSWORD: 'apipass'
            CLICKHOUSE_APP_USER: 'app'
            CLICKHOUSE_APP_PASSWORD: 'apppass'
            API_QUERIES_PER_TEAM: '{"1": 100}'
            KAFKA_HOSTS: 'kafka'
            REDIS_URL: 'redis://redis:6379/'
            PGHOST: db
            PGUSER: posthog
            PGPASSWORD: posthog
            DEPLOYMENT: hobby
            CDP_API_URL: 'http://plugins:6738'
        depends_on:
            - db
            - redis
            - clickhouse
            - kafka
            - objectstorage

    plugins:
        image: $REGISTRY_URL:$POSTHOG_APP_TAG
        command: ./bin/plugin-server --no-restart-loop
        restart: on-failure
        environment:
            SITE_URL: https://$DOMAIN
            SECRET_KEY: $POSTHOG_SECRET
            OBJECT_STORAGE_ACCESS_KEY_ID: 'object_storage_root_user'
            OBJECT_STORAGE_SECRET_ACCESS_KEY: 'object_storage_root_password'
            OBJECT_STORAGE_ENDPOINT: http://objectstorage:19000
            SESSION_RECORDING_V2_S3_ENDPOINT: http://objectstorage:19000
            OBJECT_STORAGE_ENABLED: true
            CDP_REDIS_HOST: redis7
            CDP_REDIS_PORT: 6379
            ENCRYPTION_SALT_KEYS: $ENCRYPTION_SALT_KEYS
            CYCLOTRON_DATABASE_URL: 'postgres://posthog:posthog@db:5432/posthog'
            DATABASE_URL: 'postgres://posthog:posthog@db:5432/posthog'
            PERSONS_DATABASE_URL: 'postgres://posthog:posthog@db:5432/posthog'
            KAFKA_HOSTS: 'kafka:9092'
            REDIS_URL: 'redis://redis:6379/'
            CLICKHOUSE_HOST: 'clickhouse'
            CLICKHOUSE_DATABASE: 'posthog'
            CLICKHOUSE_SECURE: 'false'
            CLICKHOUSE_VERIFY: 'false'
        depends_on:
            - db
            - redis
            - redis7
            - clickhouse
            - kafka
            - objectstorage

    objectstorage:
        image: minio/minio:RELEASE.2025-02-18T16-25-55Z
        restart: on-failure
        environment:
            MINIO_ROOT_USER: object_storage_root_user
            MINIO_ROOT_PASSWORD: object_storage_root_password
        entrypoint: sh
        command: -c 'mkdir -p /data/posthog && minio server --address ":19000" --console-address ":19001" /data'
        volumes:
            - objectstorage:/data
        ports:
            - '19000:19000'
            - '19001:19001'

    asyncmigrationscheck:
        image: $REGISTRY_URL:$POSTHOG_APP_TAG
        command: python manage.py run_async_migrations --check
        restart: 'no'
        environment:
            SITE_URL: https://$DOMAIN
            SECRET_KEY: $POSTHOG_SECRET
            SKIP_ASYNC_MIGRATIONS_SETUP: 0
            OTEL_SDK_DISABLED: 'true'
            DISABLE_SECURE_SSL_REDIRECT: 'true'
            IS_BEHIND_PROXY: 'true'
            DATABASE_URL: 'postgres://posthog:posthog@db:5432/posthog'
            CLICKHOUSE_HOST: 'clickhouse'
            CLICKHOUSE_DATABASE: 'posthog'
            CLICKHOUSE_SECURE: 'false'
            CLICKHOUSE_VERIFY: 'false'
            CLICKHOUSE_API_USER: 'api'
            CLICKHOUSE_API_PASSWORD: 'apipass'
            CLICKHOUSE_APP_USER: 'app'
            CLICKHOUSE_APP_PASSWORD: 'apppass'
            API_QUERIES_PER_TEAM: '{"1": 100}'
            KAFKA_HOSTS: 'kafka'
            REDIS_URL: 'redis://redis:6379/'
            PGHOST: db
            PGUSER: posthog
            PGPASSWORD: posthog
            DEPLOYMENT: hobby
            CDP_API_URL: 'http://plugins:6738'
        deploy:
            replicas: 0

    # Temporal containers
    temporal:
        image: temporalio/auto-setup:1.20.0
        restart: on-failure
        environment:
            - ENABLE_ES=false
            - DB=postgresql
            - DB_PORT=5432
            - POSTGRES_USER=posthog
            - POSTGRES_PWD=posthog
            - POSTGRES_SEEDS=db
            - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
        ports:
            - 7233:7233
        volumes:
            - ./docker/temporal/dynamicconfig:/etc/temporal/config/dynamicconfig
        depends_on:
            - db

    elasticsearch:
        image: elasticsearch:7.16.2
        restart: on-failure
        environment:
            - cluster.routing.allocation.disk.threshold_enabled=true
            - cluster.routing.allocation.disk.watermark.low=512mb
            - cluster.routing.allocation.disk.watermark.high=256mb
            - cluster.routing.allocation.disk.watermark.flood_stage=128mb
            - discovery.type=single-node
            - ES_JAVA_OPTS=-Xms256m -Xmx256m
            - xpack.security.enabled=false
        expose:
            - 9200
        volumes:
            - /var/lib/elasticsearch/data

    temporal-admin-tools:
        image: temporalio/admin-tools:1.20.0
        restart: on-failure
        environment:
            - TEMPORAL_CLI_ADDRESS=temporal:7233
        stdin_open: true
        tty: true
        depends_on:
            - temporal

    temporal-ui:
        image: temporalio/ui:2.31.2
        restart: on-failure
        ports:
            - 8081:8080
        environment:
            - TEMPORAL_ADDRESS=temporal:7233
            - TEMPORAL_CORS_ORIGINS=http://localhost:3000
            - TEMPORAL_CSRF_COOKIE_INSECURE=true
        depends_on:
            temporal:
                condition: service_started
            db:
                condition: service_healthy

    temporal-django-worker:
        image: $REGISTRY_URL:$POSTHOG_APP_TAG
        command: /compose/temporal-django-worker
        restart: on-failure
        volumes:
            - ./compose:/compose
        environment:
            SITE_URL: https://$DOMAIN
            SECRET_KEY: $POSTHOG_SECRET
            OTEL_SDK_DISABLED: 'true'
            DISABLE_SECURE_SSL_REDIRECT: 'true'
            IS_BEHIND_PROXY: 'true'
            DATABASE_URL: 'postgres://posthog:posthog@db:5432/posthog'
            CLICKHOUSE_HOST: 'clickhouse'
            CLICKHOUSE_DATABASE: 'posthog'
            CLICKHOUSE_SECURE: 'false'
            CLICKHOUSE_VERIFY: 'false'
            CLICKHOUSE_API_USER: 'api'
            CLICKHOUSE_API_PASSWORD: 'apipass'
            CLICKHOUSE_APP_USER: 'app'
            CLICKHOUSE_APP_PASSWORD: 'apppass'
            API_QUERIES_PER_TEAM: '{"1": 100}'
            KAFKA_HOSTS: 'kafka'
            REDIS_URL: 'redis://redis:6379/'
            PGHOST: db
            PGUSER: posthog
            PGPASSWORD: posthog
            DEPLOYMENT: hobby
            CDP_API_URL: 'http://plugins:6738'
            TEMPORAL_HOST: temporal
        depends_on:
            - db
            - redis
            - clickhouse
            - kafka
            - objectstorage
            - temporal

    cyclotron-janitor:
        image: ghcr.io/posthog/posthog/cyclotron-janitor:master
        restart: on-failure
        environment:
            DATABASE_URL: 'postgres://posthog:posthog@db:5432/posthog'
            KAFKA_HOSTS: 'kafka:9092'
            KAFKA_TOPIC: 'clickhouse_app_metrics2'
        depends_on:
            db:
                condition: service_healthy
            kafka:
                condition: service_started

    capture:
        image: ghcr.io/posthog/posthog/capture:master
        restart: on-failure
        environment:
            ADDRESS: '0.0.0.0:3000'
            KAFKA_TOPIC: 'events_plugin_ingestion'
            KAFKA_HOSTS: 'kafka:9092'
            REDIS_URL: 'redis://redis:6379/'
            CAPTURE_MODE: events
            RUST_LOG: 'info,rdkafka=warn'

    replay-capture:
        image: ghcr.io/posthog/posthog/capture:master
        restart: on-failure
        environment:
            ADDRESS: '0.0.0.0:3000'
            KAFKA_TOPIC: 'session_recording_snapshot_item_events'
            KAFKA_HOSTS: 'kafka:9092'
            REDIS_URL: 'redis://redis:6379/'
            CAPTURE_MODE: recordings

    property-defs-rs:
        image: ghcr.io/posthog/posthog/property-defs-rs:master
        restart: on-failure
        environment:
            DATABASE_URL: 'postgres://posthog:posthog@db:5432/posthog'
            KAFKA_HOSTS: 'kafka:9092'
            SKIP_WRITES: 'false'
            SKIP_READS: 'false'
            FILTER_MODE: 'opt-out'

    livestream:
        image: 'ghcr.io/posthog/livestream:main'
        restart: on-failure
        environment:
            - LIVESTREAM_JWT_SECRET=${POSTHOG_SECRET}
        ports:
            - '8666:8080'
        volumes:
            - ./docker/livestream/configs-hobby.yml:/configs/configs.yml
        depends_on:
            kafka:
                condition: service_started

    feature-flags:
        image: ghcr.io/posthog/posthog/feature-flags:master
        restart: on-failure
        volumes:
            - ./share:/share
        environment:
            WRITE_DATABASE_URL: 'postgres://posthog:posthog@db:5432/posthog'
            READ_DATABASE_URL: 'postgres://posthog:posthog@db:5432/posthog'
            MAXMIND_DB_PATH: '/share/GeoLite2-City.mmdb'
            REDIS_URL: 'redis://redis:6379/'
            ADDRESS: '0.0.0.0:3001'
            RUST_LOG: 'info'
        depends_on:
            - db
            - redis

volumes:
    zookeeper-data:
    zookeeper-datalog:
    zookeeper-logs:
    objectstorage:
    postgres-data:
    clickhouse-data:
    caddy-data:
    caddy-config:
    redis-data:
    redis7-data:
    kafka-data:
